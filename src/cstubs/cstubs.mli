(*
 * Copyright (c) 2014 Jeremy Yallop.
 *
 * This file is distributed under the terms of the MIT License.
 * See the file LICENSE for details.
 *)

(* Cstubs public interface. *)

module type FOREIGN =
sig
  type 'a fn
  val foreign : string -> ('a -> 'b) Ctypes.fn -> ('a -> 'b) fn
  val funptr : ('a -> 'b) Ctypes.fn -> ('a -> 'b) fn Ctypes.typ

  open Ctypes
  module Enum : sig
    type 'a constr
    type 'a t
    type from = [ `Include of string | `Define of string * string ]

    val macro : from:from list -> type_name:string -> ?use_module:string ->
      ?default:string -> 'i typ -> 'a t -> 'a typ
    val one : 'a constr list -> 'a t
    val any : 'a constr list -> 'a t
    val require : string -> 'a constr
    val require_bits : string -> string -> 'a constr
  end
end

module type BINDINGS = functor (F : FOREIGN) -> sig end

val write_c : Format.formatter -> prefix:string -> (module BINDINGS) -> unit
(** [write_c fmt ~prefix bindings] generates C stubs for the functions bound
    with [foreign] in [bindings].  The stubs are intended to be used in
    conjunction with the ML code generated by {!write_ml}.

    The generated code uses definitions exposed in the header file
    [cstubs_internals.h].
*)

val write_ml : Format.formatter -> prefix:string -> (module BINDINGS) -> unit
(** [write_ml fmt ~prefix bindings] generates ML bindings for the functions
    bound with [foreign] in [bindings].  The generated code conforms to the
    {!FOREIGN} interface.

    The generated code uses definitions exposed in the module
    [Cstubs_internals]. *)

